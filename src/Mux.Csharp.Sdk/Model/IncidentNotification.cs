/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// IncidentNotification
    /// </summary>
    [DataContract(Name = "IncidentNotification")]
    public partial class IncidentNotification : IEquatable<IncidentNotification>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentNotification" /> class.
        /// </summary>
        /// <param name="queuedAt">queuedAt.</param>
        /// <param name="id">id.</param>
        /// <param name="attemptedAt">attemptedAt.</param>
        public IncidentNotification(string queuedAt = default(string), long id = default(long), string attemptedAt = default(string))
        {
            this.QueuedAt = queuedAt;
            this.Id = id;
            this.AttemptedAt = attemptedAt;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets QueuedAt
        /// </summary>
        [DataMember(Name = "queued_at", EmitDefaultValue = false)]
        public string QueuedAt { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets AttemptedAt
        /// </summary>
        [DataMember(Name = "attempted_at", EmitDefaultValue = false)]
        public string AttemptedAt { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IncidentNotification {\n");
            sb.Append("  QueuedAt: ").Append(QueuedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AttemptedAt: ").Append(AttemptedAt).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncidentNotification);
        }

        /// <summary>
        /// Returns true if IncidentNotification instances are equal
        /// </summary>
        /// <param name="input">Instance of IncidentNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncidentNotification input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.QueuedAt == input.QueuedAt ||
                    (this.QueuedAt != null &&
                    this.QueuedAt.Equals(input.QueuedAt))
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.AttemptedAt == input.AttemptedAt ||
                    (this.AttemptedAt != null &&
                    this.AttemptedAt.Equals(input.AttemptedAt))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.QueuedAt != null)
                {
                    hashCode = (hashCode * 59) + this.QueuedAt.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.AttemptedAt != null)
                {
                    hashCode = (hashCode * 59) + this.AttemptedAt.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
