/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// LiveStreamEmbeddedSubtitleSettings
    /// </summary>
    [DataContract(Name = "LiveStreamEmbeddedSubtitleSettings")]
    public partial class LiveStreamEmbeddedSubtitleSettings : IEquatable<LiveStreamEmbeddedSubtitleSettings>, IValidatableObject
    {
        /// <summary>
        /// CEA-608 caption channel to read data from.
        /// </summary>
        /// <value>CEA-608 caption channel to read data from.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum LanguageChannelEnum
        {
            /// <summary>
            /// Enum Cc1 for value: cc1
            /// </summary>
            [EnumMember(Value = "cc1")]
            Cc1 = 1

        }


        /// <summary>
        /// CEA-608 caption channel to read data from.
        /// </summary>
        /// <value>CEA-608 caption channel to read data from.</value>
        [DataMember(Name = "language_channel", EmitDefaultValue = false)]
        public LanguageChannelEnum? LanguageChannel { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="LiveStreamEmbeddedSubtitleSettings" /> class.
        /// </summary>
        /// <param name="name">A name for this live stream closed caption track..</param>
        /// <param name="passthrough">Arbitrary user-supplied metadata set for the live stream closed caption track. Max 255 characters..</param>
        /// <param name="languageCode">The language of the closed caption stream. Value must be BCP 47 compliant. (default to &quot;en&quot;).</param>
        /// <param name="languageChannel">CEA-608 caption channel to read data from. (default to LanguageChannelEnum.Cc1).</param>
        public LiveStreamEmbeddedSubtitleSettings(string name = default(string), string passthrough = default(string), string languageCode = "en", LanguageChannelEnum? languageChannel = LanguageChannelEnum.Cc1)
        {
            this.Name = name;
            this.Passthrough = passthrough;
            // use default value if no "languageCode" provided
            this.LanguageCode = languageCode ?? "en";
            this.LanguageChannel = languageChannel;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// A name for this live stream closed caption track.
        /// </summary>
        /// <value>A name for this live stream closed caption track.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Arbitrary user-supplied metadata set for the live stream closed caption track. Max 255 characters.
        /// </summary>
        /// <value>Arbitrary user-supplied metadata set for the live stream closed caption track. Max 255 characters.</value>
        [DataMember(Name = "passthrough", EmitDefaultValue = false)]
        public string Passthrough { get; set; }

        /// <summary>
        /// The language of the closed caption stream. Value must be BCP 47 compliant.
        /// </summary>
        /// <value>The language of the closed caption stream. Value must be BCP 47 compliant.</value>
        [DataMember(Name = "language_code", EmitDefaultValue = false)]
        public string LanguageCode { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LiveStreamEmbeddedSubtitleSettings {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Passthrough: ").Append(Passthrough).Append("\n");
            sb.Append("  LanguageCode: ").Append(LanguageCode).Append("\n");
            sb.Append("  LanguageChannel: ").Append(LanguageChannel).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as LiveStreamEmbeddedSubtitleSettings);
        }

        /// <summary>
        /// Returns true if LiveStreamEmbeddedSubtitleSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of LiveStreamEmbeddedSubtitleSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveStreamEmbeddedSubtitleSettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Passthrough == input.Passthrough ||
                    (this.Passthrough != null &&
                    this.Passthrough.Equals(input.Passthrough))
                ) && 
                (
                    this.LanguageCode == input.LanguageCode ||
                    (this.LanguageCode != null &&
                    this.LanguageCode.Equals(input.LanguageCode))
                ) && 
                (
                    this.LanguageChannel == input.LanguageChannel ||
                    this.LanguageChannel.Equals(input.LanguageChannel)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Passthrough != null)
                {
                    hashCode = (hashCode * 59) + this.Passthrough.GetHashCode();
                }
                if (this.LanguageCode != null)
                {
                    hashCode = (hashCode * 59) + this.LanguageCode.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LanguageChannel.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
