/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// InputTrack
    /// </summary>
    [DataContract(Name = "InputTrack")]
    public partial class InputTrack : IEquatable<InputTrack>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InputTrack" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="duration">duration.</param>
        /// <param name="encoding">encoding.</param>
        /// <param name="width">width.</param>
        /// <param name="height">height.</param>
        /// <param name="frameRate">frameRate.</param>
        /// <param name="sampleRate">sampleRate.</param>
        /// <param name="sampleSize">sampleSize.</param>
        /// <param name="channels">channels.</param>
        public InputTrack(string type = default(string), double duration = default(double), string encoding = default(string), long width = default(long), long height = default(long), double frameRate = default(double), long sampleRate = default(long), long sampleSize = default(long), long channels = default(long))
        {
            this.Type = type;
            this.Duration = duration;
            this.Encoding = encoding;
            this.Width = width;
            this.Height = height;
            this.FrameRate = frameRate;
            this.SampleRate = sampleRate;
            this.SampleSize = sampleSize;
            this.Channels = channels;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name = "duration", EmitDefaultValue = false)]
        public double Duration { get; set; }

        /// <summary>
        /// Gets or Sets Encoding
        /// </summary>
        [DataMember(Name = "encoding", EmitDefaultValue = false)]
        public string Encoding { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public long Width { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public long Height { get; set; }

        /// <summary>
        /// Gets or Sets FrameRate
        /// </summary>
        [DataMember(Name = "frame_rate", EmitDefaultValue = false)]
        public double FrameRate { get; set; }

        /// <summary>
        /// Gets or Sets SampleRate
        /// </summary>
        [DataMember(Name = "sample_rate", EmitDefaultValue = false)]
        public long SampleRate { get; set; }

        /// <summary>
        /// Gets or Sets SampleSize
        /// </summary>
        [DataMember(Name = "sample_size", EmitDefaultValue = false)]
        public long SampleSize { get; set; }

        /// <summary>
        /// Gets or Sets Channels
        /// </summary>
        [DataMember(Name = "channels", EmitDefaultValue = false)]
        public long Channels { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputTrack {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  FrameRate: ").Append(FrameRate).Append("\n");
            sb.Append("  SampleRate: ").Append(SampleRate).Append("\n");
            sb.Append("  SampleSize: ").Append(SampleSize).Append("\n");
            sb.Append("  Channels: ").Append(Channels).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputTrack);
        }

        /// <summary>
        /// Returns true if InputTrack instances are equal
        /// </summary>
        /// <param name="input">Instance of InputTrack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputTrack input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Duration == input.Duration ||
                    this.Duration.Equals(input.Duration)
                ) && 
                (
                    this.Encoding == input.Encoding ||
                    (this.Encoding != null &&
                    this.Encoding.Equals(input.Encoding))
                ) && 
                (
                    this.Width == input.Width ||
                    this.Width.Equals(input.Width)
                ) && 
                (
                    this.Height == input.Height ||
                    this.Height.Equals(input.Height)
                ) && 
                (
                    this.FrameRate == input.FrameRate ||
                    this.FrameRate.Equals(input.FrameRate)
                ) && 
                (
                    this.SampleRate == input.SampleRate ||
                    this.SampleRate.Equals(input.SampleRate)
                ) && 
                (
                    this.SampleSize == input.SampleSize ||
                    this.SampleSize.Equals(input.SampleSize)
                ) && 
                (
                    this.Channels == input.Channels ||
                    this.Channels.Equals(input.Channels)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Duration.GetHashCode();
                if (this.Encoding != null)
                {
                    hashCode = (hashCode * 59) + this.Encoding.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Width.GetHashCode();
                hashCode = (hashCode * 59) + this.Height.GetHashCode();
                hashCode = (hashCode * 59) + this.FrameRate.GetHashCode();
                hashCode = (hashCode * 59) + this.SampleRate.GetHashCode();
                hashCode = (hashCode * 59) + this.SampleSize.GetHashCode();
                hashCode = (hashCode * 59) + this.Channels.GetHashCode();
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
