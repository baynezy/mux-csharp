/*
 * Mux API
 *
 * Mux is how developers build online video. This API encompasses both Mux Video and Mux Data functionality to help you build your video-related projects better and faster than ever before.
 *
 * The version of the OpenAPI document: v1
 * Contact: devex@mux.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Mux.Csharp.Sdk.Client.OpenAPIDateConverter;

namespace Mux.Csharp.Sdk.Model
{
    /// <summary>
    /// An object that describes how the image file referenced in URL should be placed over the video (i.e. watermarking). Ensure that the URL is active and persists the entire lifespan of the video object.
    /// </summary>
    [DataContract(Name = "InputSettings_overlay_settings")]
    public partial class InputSettingsOverlaySettings : IEquatable<InputSettingsOverlaySettings>, IValidatableObject
    {
        /// <summary>
        /// Where the vertical positioning of the overlay/watermark should begin from. Defaults to &#x60;\&quot;top\&quot;&#x60;
        /// </summary>
        /// <value>Where the vertical positioning of the overlay/watermark should begin from. Defaults to &#x60;\&quot;top\&quot;&#x60;</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum VerticalAlignEnum
        {
            /// <summary>
            /// Enum Top for value: top
            /// </summary>
            [EnumMember(Value = "top")]
            Top = 1,

            /// <summary>
            /// Enum Middle for value: middle
            /// </summary>
            [EnumMember(Value = "middle")]
            Middle = 2,

            /// <summary>
            /// Enum Bottom for value: bottom
            /// </summary>
            [EnumMember(Value = "bottom")]
            Bottom = 3

        }


        /// <summary>
        /// Where the vertical positioning of the overlay/watermark should begin from. Defaults to &#x60;\&quot;top\&quot;&#x60;
        /// </summary>
        /// <value>Where the vertical positioning of the overlay/watermark should begin from. Defaults to &#x60;\&quot;top\&quot;&#x60;</value>
        [DataMember(Name = "vertical_align", EmitDefaultValue = false)]
        public VerticalAlignEnum? VerticalAlign { get; set; }
        /// <summary>
        /// Where the horizontal positioning of the overlay/watermark should begin from.
        /// </summary>
        /// <value>Where the horizontal positioning of the overlay/watermark should begin from.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum HorizontalAlignEnum
        {
            /// <summary>
            /// Enum Left for value: left
            /// </summary>
            [EnumMember(Value = "left")]
            Left = 1,

            /// <summary>
            /// Enum Center for value: center
            /// </summary>
            [EnumMember(Value = "center")]
            Center = 2,

            /// <summary>
            /// Enum Right for value: right
            /// </summary>
            [EnumMember(Value = "right")]
            Right = 3

        }


        /// <summary>
        /// Where the horizontal positioning of the overlay/watermark should begin from.
        /// </summary>
        /// <value>Where the horizontal positioning of the overlay/watermark should begin from.</value>
        [DataMember(Name = "horizontal_align", EmitDefaultValue = false)]
        public HorizontalAlignEnum? HorizontalAlign { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InputSettingsOverlaySettings" /> class.
        /// </summary>
        /// <param name="verticalAlign">Where the vertical positioning of the overlay/watermark should begin from. Defaults to &#x60;\&quot;top\&quot;&#x60;.</param>
        /// <param name="verticalMargin">The distance from the vertical_align starting point and the image&#39;s closest edge. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). Negative values will move the overlay offscreen. In the case of &#39;middle&#39;, a positive value will shift the overlay towards the bottom and and a negative value will shift it towards the top..</param>
        /// <param name="horizontalAlign">Where the horizontal positioning of the overlay/watermark should begin from..</param>
        /// <param name="horizontalMargin">The distance from the horizontal_align starting point and the image&#39;s closest edge. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). Negative values will move the overlay offscreen. In the case of &#39;center&#39;, a positive value will shift the image towards the right and and a negative value will shift it towards the left..</param>
        /// <param name="width">How wide the overlay should appear. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). If both width and height are left blank the width will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If height is supplied with no width, the width will scale proportionally to the height..</param>
        /// <param name="height">How tall the overlay should appear. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). If both width and height are left blank the height will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If width is supplied with no height, the height will scale proportionally to the width..</param>
        /// <param name="opacity">How opaque the overlay should appear, expressed as a percent. (Default 100%).</param>
        public InputSettingsOverlaySettings(VerticalAlignEnum? verticalAlign = default(VerticalAlignEnum?), string verticalMargin = default(string), HorizontalAlignEnum? horizontalAlign = default(HorizontalAlignEnum?), string horizontalMargin = default(string), string width = default(string), string height = default(string), string opacity = default(string))
        {
            this.VerticalAlign = verticalAlign;
            this.VerticalMargin = verticalMargin;
            this.HorizontalAlign = horizontalAlign;
            this.HorizontalMargin = horizontalMargin;
            this.Width = width;
            this.Height = height;
            this.Opacity = opacity;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The distance from the vertical_align starting point and the image&#39;s closest edge. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). Negative values will move the overlay offscreen. In the case of &#39;middle&#39;, a positive value will shift the overlay towards the bottom and and a negative value will shift it towards the top.
        /// </summary>
        /// <value>The distance from the vertical_align starting point and the image&#39;s closest edge. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). Negative values will move the overlay offscreen. In the case of &#39;middle&#39;, a positive value will shift the overlay towards the bottom and and a negative value will shift it towards the top.</value>
        [DataMember(Name = "vertical_margin", EmitDefaultValue = false)]
        public string VerticalMargin { get; set; }

        /// <summary>
        /// The distance from the horizontal_align starting point and the image&#39;s closest edge. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). Negative values will move the overlay offscreen. In the case of &#39;center&#39;, a positive value will shift the image towards the right and and a negative value will shift it towards the left.
        /// </summary>
        /// <value>The distance from the horizontal_align starting point and the image&#39;s closest edge. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). Negative values will move the overlay offscreen. In the case of &#39;center&#39;, a positive value will shift the image towards the right and and a negative value will shift it towards the left.</value>
        [DataMember(Name = "horizontal_margin", EmitDefaultValue = false)]
        public string HorizontalMargin { get; set; }

        /// <summary>
        /// How wide the overlay should appear. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). If both width and height are left blank the width will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If height is supplied with no width, the width will scale proportionally to the height.
        /// </summary>
        /// <value>How wide the overlay should appear. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). If both width and height are left blank the width will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If height is supplied with no width, the width will scale proportionally to the height.</value>
        [DataMember(Name = "width", EmitDefaultValue = false)]
        public string Width { get; set; }

        /// <summary>
        /// How tall the overlay should appear. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). If both width and height are left blank the height will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If width is supplied with no height, the height will scale proportionally to the width.
        /// </summary>
        /// <value>How tall the overlay should appear. Can be expressed as a percent (\&quot;10%\&quot;) or as a pixel value (\&quot;100px\&quot;). If both width and height are left blank the height will be the true pixels of the image, applied as if the video has been scaled to fit a 1920x1080 frame. If width is supplied with no height, the height will scale proportionally to the width.</value>
        [DataMember(Name = "height", EmitDefaultValue = false)]
        public string Height { get; set; }

        /// <summary>
        /// How opaque the overlay should appear, expressed as a percent. (Default 100%)
        /// </summary>
        /// <value>How opaque the overlay should appear, expressed as a percent. (Default 100%)</value>
        [DataMember(Name = "opacity", EmitDefaultValue = false)]
        public string Opacity { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InputSettingsOverlaySettings {\n");
            sb.Append("  VerticalAlign: ").Append(VerticalAlign).Append("\n");
            sb.Append("  VerticalMargin: ").Append(VerticalMargin).Append("\n");
            sb.Append("  HorizontalAlign: ").Append(HorizontalAlign).Append("\n");
            sb.Append("  HorizontalMargin: ").Append(HorizontalMargin).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Opacity: ").Append(Opacity).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InputSettingsOverlaySettings);
        }

        /// <summary>
        /// Returns true if InputSettingsOverlaySettings instances are equal
        /// </summary>
        /// <param name="input">Instance of InputSettingsOverlaySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InputSettingsOverlaySettings input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.VerticalAlign == input.VerticalAlign ||
                    this.VerticalAlign.Equals(input.VerticalAlign)
                ) && 
                (
                    this.VerticalMargin == input.VerticalMargin ||
                    (this.VerticalMargin != null &&
                    this.VerticalMargin.Equals(input.VerticalMargin))
                ) && 
                (
                    this.HorizontalAlign == input.HorizontalAlign ||
                    this.HorizontalAlign.Equals(input.HorizontalAlign)
                ) && 
                (
                    this.HorizontalMargin == input.HorizontalMargin ||
                    (this.HorizontalMargin != null &&
                    this.HorizontalMargin.Equals(input.HorizontalMargin))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Opacity == input.Opacity ||
                    (this.Opacity != null &&
                    this.Opacity.Equals(input.Opacity))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.VerticalAlign.GetHashCode();
                if (this.VerticalMargin != null)
                {
                    hashCode = (hashCode * 59) + this.VerticalMargin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HorizontalAlign.GetHashCode();
                if (this.HorizontalMargin != null)
                {
                    hashCode = (hashCode * 59) + this.HorizontalMargin.GetHashCode();
                }
                if (this.Width != null)
                {
                    hashCode = (hashCode * 59) + this.Width.GetHashCode();
                }
                if (this.Height != null)
                {
                    hashCode = (hashCode * 59) + this.Height.GetHashCode();
                }
                if (this.Opacity != null)
                {
                    hashCode = (hashCode * 59) + this.Opacity.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
